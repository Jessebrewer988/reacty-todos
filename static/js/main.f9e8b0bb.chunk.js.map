{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/layout/Header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","e","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","AddTodo","state","onSubmit","preventDefault","addTodo","setState","defineProperty","target","name","display","placeholder","flex","className","headerStyle","textAlign","linkStyle","header","react_router_dom","to","about","Fragment","App","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","Header","react_router","path","exact","render","components_AddTodo","components_Todos","component","About","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9e8b0bb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n        background: '#f4f4f4',\r\n        padding: '10px',\r\n        borderBottom: '1px #ccc dotted',\r\n        textDecoration: this.props.todo.completed ?  \r\n        'line-through' : 'none'\r\n    }\r\n}\r\n\r\n    markComplete = (e) => {\r\n\r\n    }\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n        <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\r\n        { title }\r\n        <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map(todo => (\r\n        <TodoItem delTodo={this.props.delTodo} todo={todo} key={todo.id} markComplete={this.props.markComplete}/>\r\n        ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value })\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n        <input type=\"text\" name=\"title\" placeholder=\"Add Todo...\" style={{ flex: '10', padding: '10px' }} value={this.state.title} onChange={this.onChange} />\r\n        <input type=\"submit\" value=\"Submit\" className=\"btn\" style={{ flex: '1' }} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst header = () => (\r\n    <header style={headerStyle}>\r\n        <h1>Welcome to My Todo List</h1>\r\n        <NavLink style={linkStyle} to=\"/\">Home</NavLink > | <NavLink style={linkStyle} to=\"/about\">About</NavLink>\r\n    </header>\r\n)\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default header;","import React from 'react';\r\n\r\nconst about = () => (\r\n    <>\r\n        <h1>About</h1>\r\n        <p>This is a React todo list app. There are many like it but this one is mine. I'm happy to have you here. I will be adding more to this as time goes on because this is a good sandbox for basic React stuff. I'm planning on adding Authentication with Passport or 0Auth, a more fun API, and a backend database with MongoDB.</p>\r\n        <p>Stay tuned.</p>\r\n    </>\r\n);\r\n\r\nexport default about;","import React, { Component }  from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport axios from 'axios';\n\n// import uuid from 'uuid';\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=40')\n      .then(res => this.setState({ todos: res.data }))\n  }\n\n  // Toggle Todo Complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map( todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      } \n      return todo;\n      })\n    })\n  }\n\n\n  // Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({ todos: [...this.state.todos.filter( todo => todo.id !== id)]}))\n  }\n\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    })\n      .then(res => this.setState({ todos: [...this.state.todos, res.data] }))\n    \n  }\n\n  render() {\n    const { todos } = this.state;\n\n  return (\n    <Router>\n      <div className=\"App\">\n      <Header />\n        <div className=\"container\">\n          <Route path=\"/\" exact render={props => (\n            <>          \n            <AddTodo addTodo={this.addTodo}/>\n            <Todos delTodo={this.delTodo} todos={todos} markComplete={this.markComplete}/>\n            </>\n          )} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </div>\n    </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}